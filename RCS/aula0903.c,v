head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	2018.10.15.18.32.59;	author karen.arcoverde;	state Exp;
branches;
next	1.1;

1.1
date	2018.10.13.19.49.52;	author karen.arcoverde;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@/*
 * Universidade Federal do Rio de Janeiro
 * Escola Politecnica
 * Departamento de Eletronica e de Computacao
 * EEL270 - Computacao II - Turma 2018/2
 * Prof. Marcelo Luiz Drumond Lanza
 * Autora: Karen dos Anjos Arcoverde
 *
 * $Author: karen.arcoverde $
 * $Date: 2018/10/13 19:49:52 $
 * $Log: aula0903.c,v $
 * Revision 1.1  2018/10/13 19:49:52  karen.arcoverde
 * Initial revision
 *
 */



#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include "aula0901.h"

#define NUMERO_ARGUMENTOS                                       3
#define NUMERO_ARGUMENTOS_INVALIDO                              1
#define ABRIR_ARQUIVO_INVALIDO                                  2
#define ESCREVER_ARQUIVO_INVALIDO                               3
#define ALOCAR_MEMORIA_INVALIDO                                 4
#define OK                                                      0

int
main (int argc, char *argv[])
{
	unsigned indice = 0;
	FILE *leitura, *escrita;
	char aux;
	char  *entrada;  
	byte *saida;
	unsigned numeroBytes;

	if (argc != NUMERO_ARGUMENTOS)
	{
		printf ("Numero de argumentos invalido. %s <nome arquivo> <nome arquivo> \n", argv [0]);
		exit (NUMERO_ARGUMENTOS_INVALIDO);
	}

	if ((leitura = fopen (argv [1], "r")) == NULL)
	{	
		printf ("Erro ao abrir o arquivo %s\n", argv [1]);
		printf ("Erro (#%i) : %s\n", errno, strerror (errno));
		exit (ABRIR_ARQUIVO_INVALIDO);
	}

	if ((escrita = fopen (argv [2], "w")) == NULL)
	{
		printf ("Erro ao abrir o arquivo %s\n", argv [2]);
		printf ("Erro (#%i) : %s\n", errno, strerror (errno));
		fclose (leitura);
		exit (ABRIR_ARQUIVO_INVALIDO);
	}

	while (fread (&aux, 1, 1, leitura) > 0)
	{
		if (aux != EOS)
			indice ++;
	}

	fclose (leitura);


	if ((leitura = fopen (argv [1], "r")) == NULL)
	{
		printf ("Erro ao abrir o arquivo %s\n", argv [1]);
		printf ("Erro (#%i) : %s\n ", errno, strerror (errno));
		exit (ABRIR_ARQUIVO_INVALIDO);	
	}

	if (!(entrada = malloc (sizeof (char) *1*indice)))
	{	
		printf ("Erro de memoria\n");
		exit (ALOCAR_MEMORIA_INVALIDO);
	}

	indice = 0;

	while (fread (&aux, 1, 1, leitura) > 0)
	{
		if (aux != EOS)
		{
			entrada [indice] = aux;
			indice ++;

		}

	}


	if ((saida = malloc (sizeof (byte) *3* (indice / 4))) == NULL)
	{
		printf ("Erro de memoria\n");
		exit (ALOCAR_MEMORIA_INVALIDO);
	}

	DecodificarBase64 (entrada, saida, &numeroBytes);

	fprintf (escrita, "%s", saida);

	if (ferror (escrita))
	{
		printf ("Erro ao escrever no arquivo %s\n", argv [2]);
		printf ("Erro (#%i) : %s \n", errno, strerror (errno));
		fclose (leitura);
		fclose (escrita);
		exit (ESCREVER_ARQUIVO_INVALIDO);

	}

	fclose (leitura);
	fclose (escrita);
	free (entrada);
	free (saida);

	return OK;

}
/*$RCSfile: aula0903.c,v $*/

@


1.1
log
@Initial revision
@
text
@d9 6
a14 3
 * $Author$
 * $Date$
 * $Log$
a21 1
#include <ctype.h>
d27 3
a29 3
#define ERRO_ABRIR_ARQUIVO                                      2
#define ERRO_ESCREVER_ARQUIVO                                   3
#define ERRO_ALOCAR_MEMORIA                                     4
d37 1
a37 1
	char auxiliar;
d48 1
a48 1
	if (!(leitura = fopen (argv [1], "r")))
d50 1
a50 1
		printf ("Erro ao abrir o arquivo \"%s\"\n", argv [1]);
d52 1
a52 1
		exit (ERRO_ABRIR_ARQUIVO);
d55 1
a55 1
	if (!(escrita = fopen (argv [2], "w")))
d57 1
a57 1
		printf ("Erro ao abrir o arquivo \"%s\"\n", argv [2]);
d60 1
a60 1
		exit (ERRO_ABRIR_ARQUIVO);
d63 1
a63 1
	while (fread (&auxiliar, 1, 1, leitura) > 0)
d65 1
a65 1
		if (auxiliar != EOS)
d72 1
a72 1
	if (!(leitura = fopen (argv [1], "r")))
d74 1
a74 1
		printf ("Erro ao abrir o arquivo \"%s\"\n", argv [1]);
d76 1
a76 1
		exit (ERRO_ABRIR_ARQUIVO);	
d82 1
a82 1
		exit (ERRO_ALOCAR_MEMORIA);
d87 1
a87 1
	while (fread (&auxiliar, 1, 1, leitura) > 0)
d89 1
a89 1
		if (auxiliar != EOS)
d91 1
a91 1
			entrada [indice] = auxiliar;
d102 1
a102 1
		exit (ERRO_ALOCAR_MEMORIA);
d111 1
a111 1
		printf ("Erro ao escrever no arquivo \"%s\"\n", argv [2]);
d115 1
a115 1
		exit (ERRO_ESCREVER_ARQUIVO);
d127 1
a127 1
/*$RCSfile$*/
@
